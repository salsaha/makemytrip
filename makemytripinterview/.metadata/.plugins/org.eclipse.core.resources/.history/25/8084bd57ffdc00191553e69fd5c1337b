package makemytrip.airport.hopping;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Set;

public class FindRoute {
	
	public HashMap<String, Airport> airportConnectivity = new HashMap<String, Airport>();

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		FindRoute fr = new FindRoute();
		fr.airportConnectivity.put("BOM", new Airport("BOM"));

	}
	
	List<String> getUnreachableAirports(String city)
	{
		Airport airportDetails = airportConnectivity.get(city);
		HashMap<String, Boolean> allVisitedAirports = new HashMap<String, Boolean>();
		Set<String> allAirports = airportConnectivity.keySet();
		for(String airport : allAirports)
		{
			allVisitedAirports.put(airport, false);
		}
		
		
		return null;
	}
	
	List<String> findNotReachableAirport(Airport airport, Set<String> all)
	{
		/*
		 boolean visited[] = new boolean[V]; 
  
        // Create a queue for BFS 
        LinkedList<Integer> queue = new LinkedList<Integer>(); 
  
        // Mark the current node as visited and enqueue it 
        visited[s]=true; 
        queue.add(s); 
  
        while (queue.size() != 0) 
        { 
            // Dequeue a vertex from queue and print it 
            s = queue.poll(); 
            System.out.print(s+" "); 
  
            // Get all adjacent vertices of the dequeued vertex s 
            // If a adjacent has not been visited, then mark it 
            // visited and enqueue it 
            Iterator<Integer> i = adj[s].listIterator(); 
            while (i.hasNext()) 
            { 
                int n = i.next(); 
                if (!visited[n]) 
                { 
                    visited[n] = true; 
                    queue.add(n); 
                } 
            } 
        } 
		 */
		
		return null;
	}
	
	

}
